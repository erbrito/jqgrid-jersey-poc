allprojects {
    apply plugin : 'java'
    apply plugin : 'groovy'
    apply plugin : 'eclipse'
    apply plugin : 'maven'
    //apply plugin: 'application'
    sourceCompatibility = 1.7
        targetCompatibility = 1.7
        version = '1.0'
        repositories {
        mavenCentral()
        maven {
            url "http://maven.restlet.org"
        }
        maven {
            url "http://repository.jboss.org/nexus/content/groups/public-jboss/"
        }
        maven {
            url "http://download.java.net/maven/2/"
        }
        maven {
            url 'http://repository.jboss.org/nexus/content/groups/public'
        }
        
    }
    dependencies {
        testCompile group : 'junit',
        name : 'junit',
        version : '4.11'
        compile group : 'commons-collections',
        name : 'commons-collections',
        version : '3.2'
    }
}

configurations {
    xjc
}

dependencies {
    compile 'javax.mail:mail:1.4.7',
    'org.codehaus.groovy:groovy-all:2.1.2'
    xjc(
		['com.sun.xml.bind:jaxb-xjc:2.2.5-2'],
        ['com.sun.xml.bind:jaxb-impl:2.2-EA']
		)
    
}

sourceCompatibility = 1.7
    
    /*
		jar {
		manifest {
		def manifestClasspath = configurations.runtime.collect { it.getName() }.join(' ')
		attributes ('Main-Class': 'org.erbrito.routerconf.MyCamelConfiguration', 'Class-Path': manifestClasspath)
		}
		}
	*/
    /*
		task release(type: Tar, dependsOn: assemble) {
		extension = "tar.gz"
		
		compression = Compression.GZIP
		
		into('lib') {
		from configurations.runtime
		//from configurations.compile
		}
		}
	*/
    
    /*
		sourceSets {
		main {
		java { srcDirs "src/main/generated/java" }
		}
		}
     */
    
task makeGenDirs << {
    mkdir('src/main/generated/java')
}

/*

	task createXsd(type: JavaExec){
		main = "-jar"
		args =[
		'c:\\javaTools\\trang-20030619\\trang-20030619\\trang.jar',
		'src/main/resources/sampleXmlResponse.xml',
		'src/main/resources/sampleXmlResponse3.xsd'

		]
	}

	task xjc(dependsOn: createXsd  ) {
		doLast{
			ant {
			taskdef(
			name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath:configurations.xjc.asPath)
			xjc(
			destdir: 'src/main/java',
			package: 'com.model.rest'){
				schema(
				dir: 'src/main/resources',
				includes: 'sampleXmlResponse3.xsd'
				//includes: 'sampleXmlValue.xsd'
				)
				}
			}
		}
	}
	//xjc.dependsOn  makeGenDirs
	compileJava.dependsOn(xjc)
 */

project(':jqgridjersey_ee_model') {
    configurations {
        providedCompile
    }
    dependencies {
        compile('javax.mail:mail:1.4.7',
            'org.codehaus.groovy:groovy-all:2.1.1',
			'javax.enterprise:cdi-api:1.1', 
			'javax.annotation:javax.annotation-api:1.2'
			)
        compile('org.glassfish.hk2:hk2-api:2.2.0-b21')
        providedCompile('javax.servlet:servlet-api:3.0-alpha-1', 'javax.enterprise:cdi-api:1.1', 'javax.annotation:javax.annotation-api:1.2')
        /*{
        //exclude group:'javax.inject'
        exclude group:'javax.inject', module:'javax.inject'
        }*/
    }
}

project(':jqgridjersey_ee_web') {
    apply plugin : 'groovy'
    apply plugin : 'war'
    apply plugin : 'jetty'
    apply plugin : 'eclipse-wtp'
    //apply plugin:'arquillian'
    
    /*
    arquillian {
    debug = true
    deployable = war.archivePath
    
    containers {
    jetty {
    version = '8'
    type = 'embedded'
    config = ['bindHttpPort': 8080, 'bindAddress': '127.0.0.1', 'jettyPlus': false]
    
    dependencies {
    adapter 'org.jboss.arquillian.container:arquillian-jetty-embedded-7:1.0.0.CR1'
    container 'org.eclipse.jetty:jetty-webapp:8.1.11.v20130520'
    container group: 'org.eclipse.jetty', name: 'jetty-plus', version: '8.1.11.v20130520'
    }
    }
    }
    }
     */
    
    
    
    dependencies {
        
        compile project(':jqgridjersey_ee_model'),
			/*
			'org.glassfish.jersey.media:jersey-media-moxy:2.4.1',
			'org.glassfish.jersey.media:jersey-media-json-processing:2.4.1',
			'org.glassfish.jersey.containers:jersey-container-servlet:2.4.1',
			'org.glassfish.jersey.ext:project:2.4.1',
			'org.slf4j:slf4j-api:1.7.5',
			*/
			'org.codehaus.groovy:groovy-all:2.1.1',
			'org.codehaus.groovy:groovy-servlet:2.1.1',
			//'cglib:cglib:2.2.2'
			'cglib:cglib:3.0'
			//'org.jboss.weld.servlet:weld-servlet:2.1.0.Final',
			//'org.eclipse.jetty:jetty-servlet:9.0.6.v20130930',
			//'org.eclipse.jetty:jetty-server:9.0.6.v20130930',
			/*
			'javax.ws.rs:javax.ws.rs-api:2.0',
			'javax.servlet:jstl:1.2',
			'javax.annotation:javax.annotation-api',
			'javax.enterprise:cdi-api:1.1',
			'javax.servlet:servlet-api:3.0-alpha-1',
			'javax.annotation:javax.annotation-api',
			'org.slf4j:slf4j-jdk14:1.7.5'
			*/
        
        providedCompile 'org.eclipse.jetty:jetty-server:9.0.6.v20130930',
			'javax.enterprise:cdi-api:1.1',
			'javax.servlet:servlet-api:3.0-alpha-1',
			//added
			'javax.ws.rs:javax.ws.rs-api:2.0',
			'javax.servlet:jstl:1.2',
			//'javax.annotation:javax.annotation-api',
			'javax.enterprise:cdi-api:1.1',
			'javax.servlet:servlet-api:3.0-alpha-1',
			'org.slf4j:slf4j-api:1.7.5',
			'org.slf4j:slf4j-jdk14:1.7.5'
        
        runtime 'javax.ws.rs:javax.ws.rs-api:2.0',
			'javax.servlet:jstl:1.2',
			'javax.annotation:javax.annotation-api:1.2'
        
        
        
        
    }
    
   
    
    task showMyDeps() {
        configurations.compile.each {
            println it
        }
        copy {
            from configurations.compile
            into "$buildDir/myLibs"
        }
    }
    
    
    
    
    task showWarPath() {
        println war.archivePath
    }
    
}
